generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String         @id @default(cuid())
  name                        String
  email                       String         @unique
  authTechnique               String
  password                    String?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime?
  passwordSalt                String?
  passwordIterations          Int?
  avatarUrl                   String
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  role                        Role           @default(USER)
  timezone                    String         @default("America/Chicago")
  accounts                    Account[]
  budgets                     Budget[]
  categories                  Category[]
  subscriptions               Subscription[]
  transactions                Transaction[]
  transfers                   Transfer[]
}

model Account {
  id             String         @id @default(cuid())
  type           AccountType
  userId         String
  archived       Boolean        @default(false)
  balance        Float
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  creditLimit    Float?
  pendingBalance Float
  user           User           @relation(fields: [userId], references: [id])
  subscriptions  Subscription[]
  transactions   Transaction[]
  transfersFrom  Transfer[]     @relation("fromAccount")
  transfersTo    Transfer[]     @relation("toAccount")
}

model Category {
  id            String         @id @default(cuid())
  userId        String
  archived      Boolean        @default(false)
  description   String
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  budgets       Budget[]
  user          User           @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  transactions  Transaction[]
  transfers     Transfer[]
}

model Transaction {
  id             String            @id @default(cuid())
  amount         Float
  description    String
  date           DateTime
  type           TransactionType
  userId         String
  accountId      String
  categoryId     String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  status         TransactionStatus
  subscriptionId String?
  account        Account           @relation(fields: [accountId], references: [id])
  category       Category          @relation(fields: [categoryId], references: [id])
  subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
  transfersFrom  Transfer[]        @relation("fromAccountTransaction")
  transfersTo    Transfer[]        @relation("toAccountTransaction")
}

model Subscription {
  id           String                @id @default(cuid())
  description  String
  startDate    DateTime
  endDate      DateTime?
  amount       Float
  frequency    SubscriptionFrequency
  userId       String
  categoryId   String
  accountId    String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  account      Account               @relation(fields: [accountId], references: [id])
  category     Category              @relation(fields: [categoryId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Budget {
  id          String    @id @default(cuid())
  amount      Float
  startDate   DateTime
  endDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String
  description String
  goal        Float
  category    Category  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Transfer {
  id                       String         @id @default(cuid())
  amount                   Float
  description              String
  status                   TransferStatus
  date                     DateTime
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  userId                   String
  fromAccountId            String
  toAccountId              String
  fromAccountTransactionId String
  toAccountTransactionId   String
  categoryId               String
  category                 Category       @relation(fields: [categoryId], references: [id])
  fromAccount              Account        @relation("fromAccount", fields: [fromAccountId], references: [id])
  fromAccountTransaction   Transaction    @relation("fromAccountTransaction", fields: [fromAccountTransactionId], references: [id])
  toAccount                Account        @relation("toAccount", fields: [toAccountId], references: [id])
  toAccountTransaction     Transaction    @relation("toAccountTransaction", fields: [toAccountTransactionId], references: [id])
  user                     User           @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum AccountType {
  SAVINGS
  CHECKINGS
  CREDIT
  OTHER
}

enum TransactionStatus {
  CLEARED
  PENDING
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum SubscriptionFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}

enum TransferStatus {
  CLEARED
  PENDING
  CANCELLED
}
