generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())
    name String
    email String @unique
    avatarUrl String
    password String?
    passwordSalt String?
    passwordIterations Int?
    passwordResetToken String?
    passwordResetTokenExpiresAt DateTime?
    authTechnique String // email | google | github
    role Role @default(USER)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    accounts Account[]
    categories Category[]
    transactions Transaction[]
    subscriptions Subscription[]
    budgets Budget[]
    transfers Transfer[]
}

enum Role {
    ADMIN
    USER
}

model Account {
    id String @id @default(cuid())
    type AccountType
    name String
    balance Float
    pendingBalance Float
    creditLimit Float?
    archived Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    transactions Transaction[]
    subscriptions Subscription[]
    transfersFrom Transfer[] @relation("fromAccount")
    transfersTo Transfer[] @relation("toAccount")
}

enum AccountType {
    SAVINGS
    CHECKINGS
    CREDIT
    OTHER
}

model Category {
    id String @id @default(cuid())
    title String
    description String
    archived Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    transactions Transaction[]
    subscriptions Subscription[]
    budgets Budget[]
    transfers Transfer[]
}

model Transaction {
    id String @id @default(cuid())
    amount Float
    description String
    date DateTime
    type TransactionType
    status TransactionStatus

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    accountId String
    account Account @relation(fields: [accountId], references: [id])

    categoryId String
    category Category @relation(fields: [categoryId], references: [id])

    subscriptionId String?
    subscription Subscription? @relation(fields: [subscriptionId], references: [id])

    transfersFrom Transfer[] @relation("fromAccountTransaction")
    transfersTo Transfer[] @relation("toAccountTransaction")
}

enum TransactionStatus {
    CLEARED
    PENDING
    CANCELLED
}

enum TransactionType {
    INCOME
    EXPENSE
}

model Subscription {
    id String @id @default(cuid())
    description String
    startDate DateTime
    endDate DateTime?
    amount Float
    frequency SubscriptionFrequency

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    categoryId String
    category Category @relation(fields: [categoryId], references: [id])

    accountId String
    account Account @relation(fields: [accountId], references: [id])

    transactions Transaction[]
}

enum SubscriptionFrequency {
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
    YEARLY
}

model Budget {
    id String @id @default(cuid())
    goal Float
    amount Float
    startDate DateTime
    endDate DateTime?
    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    categoryId String
    category Category @relation(fields: [categoryId], references: [id])
}

model Transfer {
    id String @id @default(cuid())
    amount Float
    description String
    status TransferStatus
    date DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Attachments
    userId String
    user User @relation(fields: [userId], references: [id])

    categoryId String
    category Category @relation(fields: [categoryId], references: [id])

    fromAccountId String
    fromAccount Account @relation("fromAccount", fields: [fromAccountId], references: [id])

    toAccountId String
    toAccount Account @relation("toAccount", fields: [toAccountId], references: [id])

    fromAccountTransactionId String
    fromAccountTransaction Transaction @relation("fromAccountTransaction", fields: [fromAccountTransactionId], references: [id])
    
    toAccountTransactionId String
    toAccountTransaction Transaction @relation("toAccountTransaction", fields: [toAccountTransactionId], references: [id])
}

enum TransferStatus {
    CLEARED
    PENDING
    CANCELLED
}